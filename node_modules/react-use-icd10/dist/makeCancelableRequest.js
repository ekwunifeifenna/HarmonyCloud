var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import axios from 'axios';
const url = `https://clinicaltables.nlm.nih.gov/api/icd10cm/v3/search`;
const makeCancelableRequest = () => {
    let call;
    return (keyword) => __awaiter(this, void 0, void 0, function* () {
        try {
            if (call)
                call.cancel();
            call = axios.CancelToken.source();
            const params = { sf: 'code,name', terms: keyword };
            return axios.get(url, { cancelToken: call.token, params });
        }
        catch (error) {
            throw error;
        }
    });
};
export default makeCancelableRequest;
