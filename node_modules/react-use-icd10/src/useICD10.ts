import { useEffect, useRef, useReducer } from 'react'
import axios from 'axios'
import { UseICD10Params } from './types'
import makeCancelableRequest from './makeCancelableRequest'
import parseResponse from './parseResponse'
import getCurrentValues from './getCurrentValues'
import hasInvalidChars from './hasInvalidChars'
import makeNewIcd10 from './makeNewIcd10'

const initialState = {
  fetching: false,
  fetched: false,
  fetchError: null,
  codes: [],
  results: {},
  total: 0,
}

const reducer = (state: any, action: any) => {
  switch (action.type) {
    case 'fetching':
      return { ...state, fetching: true }
    case 'fetched':
      return {
        ...state,
        fetching: false,
        fetched: true,
        codes: action.results.codes,
        results: action.results.results,
        total: action.results.total,
      }
    case 'fetch-failed':
      return {
        ...state,
        fetching: false,
        fetched: false,
        fetchError: action.error,
      }
    case 'no-results':
      return { ...state, fetching: false, fetched: false, fetchError: null }
    default:
      return state
  }
}

const useICD10 = ({ toString }: UseICD10Params = {}) => {
  const isMounted = useRef(true)
  const [state, dispatch] = useReducer(reducer, initialState)

  const callSearch = makeCancelableRequest()

  const onSearch = async (e?: any) => {
    e.persist()
    const keyword = e.target.value
    if (!keyword) return
    if (keyword) {
      try {
        dispatch({ type: 'fetching' })
        const { data = [] } = await callSearch(keyword)
        const parsedResults = parseResponse(data)
        if (parsedResults && parsedResults.codes.length) {
          if (isMounted.current) {
            dispatch({ type: 'fetched', results: parsedResults })
          }
        } else dispatch({ type: 'no-results' })
      } catch (error) {
        if (isMounted.current && !axios.isCancel(error)) {
          dispatch({ type: 'fetch-failed', error })
        }
      }
    }
  }

  const filterer = (inputValue = '') => (acc: string[] = [], code: string) => {
    let shouldShow = false
    const diagnosisResult = state.results[code] || ''
    if (hasInvalidChars(inputValue)) return acc
    const searchRegex = new RegExp(inputValue, 'i')
    if (!inputValue) shouldShow = true
    else if (searchRegex.test(diagnosisResult)) shouldShow = true
    else if (searchRegex.test(code)) shouldShow = true
    if (shouldShow) acc.push(code)
    return acc
  }

  const toStringDefault = (code: string) =>
    state.results[code] ? `${code}: ${state.results[code].toUpperCase()}` : ''

  useEffect(() => {
    return () => {
      isMounted.current = false
    }
  }, [])

  return {
    ...state,
    onSearch,
    filterer,
    toString: toString || toStringDefault,
    makeNewIcd10,
    getCurrentValues,
  }
}

export default useICD10
